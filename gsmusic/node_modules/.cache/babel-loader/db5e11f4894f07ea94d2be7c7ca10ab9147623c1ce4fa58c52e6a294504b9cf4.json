{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\nconst cors = require('cors');\nconst PORT = process.env.PORT || 5000;\n\n// Set up multer for file uploads\nconst upload = multer({\n  dest: 'uploads/'\n});\n\n// Mock data for songs\nlet songs = [];\napp.use(cors());\n\n// Read songs from JSON file\ntry {\n  const data = fs.readFileSync('songs.json', 'utf8');\n  songs = JSON.parse(data);\n} catch (err) {\n  console.error('Error reading songs from file:', err);\n}\n\n// Endpoint to get all songs\napp.get('/api/songs', (req, res) => {\n  res.json(songs);\n});\napp.post('/api/songs', upload.single('songFile'), (req, res) => {\n  const {\n    title,\n    image,\n    artist,\n    categories\n  } = req.body;\n  const songFile = req.file;\n  if (!title || !image || !artist || !categories || !songFile) {\n    return res.status(400).json({\n      message: 'Missing required fields'\n    });\n  }\n  const newId = songs.length > 0 ? songs[songs.length - 1].id + 1 : 1;\n  const fileName = `${newId}_${songFile.originalname}`;\n  const filePath = path.join(__dirname, 'songs', fileName);\n  fs.renameSync(songFile.path, filePath);\n  const newSong = {\n    id: newId,\n    title,\n    image,\n    artist,\n    categories: categories.split(',').map(category => category.trim()),\n    // Convert categories string to array\n    audio: `/audio/${fileName}` // URL to access the song file\n  };\n  songs.push(newSong);\n  saveSongsToFile(); // Save songs to JSON file\n  res.status(201).json(newSong);\n});\n\n// Serve audio files\napp.use('/audio', express.static(path.join(__dirname, 'songs')));\n\n// Save songs to JSON file\nconst saveSongsToFile = () => {\n  fs.writeFileSync('songs.json', JSON.stringify(songs, null, 2), 'utf8');\n};\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","multer","fs","path","app","cors","PORT","process","env","upload","dest","songs","use","data","readFileSync","JSON","parse","err","console","error","get","req","res","json","post","single","title","image","artist","categories","body","songFile","file","status","message","newId","length","id","fileName","originalname","filePath","join","__dirname","renameSync","newSong","split","map","category","trim","audio","push","saveSongsToFile","static","writeFileSync","stringify","listen","log"],"sources":["C:/Users/Girija Sh. Mohanta/Desktop/GSMusic App/gsmusic/src/Musicplayer.js"],"sourcesContent":["const express = require('express');\r\nconst multer = require('multer');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst app = express();\r\nconst cors = require('cors');\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Set up multer for file uploads\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// Mock data for songs\r\nlet songs = [];\r\n\r\napp.use(cors());\r\n\r\n// Read songs from JSON file\r\ntry {\r\n  const data = fs.readFileSync('songs.json', 'utf8');\r\n  songs = JSON.parse(data);\r\n} catch (err) {\r\n  console.error('Error reading songs from file:', err);\r\n}\r\n\r\n// Endpoint to get all songs\r\napp.get('/api/songs', (req, res) => {\r\n  res.json(songs);\r\n});\r\n\r\napp.post('/api/songs', upload.single('songFile'), (req, res) => {\r\n  const { title, image, artist, categories } = req.body;\r\n  const songFile = req.file;\r\n\r\n  if (!title || !image || !artist || !categories || !songFile) {\r\n    return res.status(400).json({ message: 'Missing required fields' });\r\n  }\r\n\r\n  const newId = songs.length > 0 ? songs[songs.length - 1].id + 1 : 1;\r\n  const fileName = `${newId}_${songFile.originalname}`;\r\n  const filePath = path.join(__dirname, 'songs', fileName);\r\n  fs.renameSync(songFile.path, filePath);\r\n\r\n  const newSong = {\r\n    id: newId,\r\n    title,\r\n    image,\r\n    artist,\r\n    categories: categories.split(',').map(category => category.trim()), // Convert categories string to array\r\n    audio: `/audio/${fileName}`, // URL to access the song file\r\n  };\r\n\r\n  songs.push(newSong);\r\n  saveSongsToFile(); // Save songs to JSON file\r\n  res.status(201).json(newSong);\r\n});\r\n\r\n// Serve audio files\r\napp.use('/audio', express.static(path.join(__dirname, 'songs')));\r\n\r\n// Save songs to JSON file\r\nconst saveSongsToFile = () => {\r\n  fs.writeFileSync('songs.json', JSON.stringify(songs, null, 2), 'utf8');\r\n};\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}