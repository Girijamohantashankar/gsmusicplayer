{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Girija Sh. Mohanta\\\\Desktop\\\\music\\\\gsmusic\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Musicplayer from './Musicplayer.js';\nimport Loader from './Loader.js'; // Import your Loader component\nimport audioClip from './loader.mp3'; // Import your audio clip\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const audio = new Audio(audioClip);\n\n    // Function to handle audio play\n    const playAudio = () => {\n      audio.play();\n      localStorage.setItem('audioPlayed', 'true');\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 3000); // Set isLoading to false after 3 seconds\n    };\n\n    // Check if audio has been played before\n    const audioPlayedBefore = localStorage.getItem('audioPlayed');\n\n    // Add event listener for document click to trigger audio playback\n    const handleDocumentClick = () => {\n      if (!audioPlayedBefore) {\n        playAudio();\n      }\n    };\n    document.addEventListener('click', handleDocumentClick);\n\n    // Clean up event listener on component unmount\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n      audio.pause(); // Pause the audio if component unmounts\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ?\n    /*#__PURE__*/\n    // Show the loader component while isLoading is true\n    _jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Show the music player app when isLoading becomes false\n    _jsxDEV(Musicplayer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Musicplayer","Loader","audioClip","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isLoading","setIsLoading","audio","Audio","playAudio","play","localStorage","setItem","setTimeout","audioPlayedBefore","getItem","handleDocumentClick","document","addEventListener","removeEventListener","pause","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Girija Sh. Mohanta/Desktop/music/gsmusic/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Musicplayer from './Musicplayer.js';\nimport Loader from './Loader.js'; // Import your Loader component\nimport audioClip from './loader.mp3'; // Import your audio clip\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const audio = new Audio(audioClip);\n\n    // Function to handle audio play\n    const playAudio = () => {\n      audio.play();\n      localStorage.setItem('audioPlayed', 'true');\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 3000); // Set isLoading to false after 3 seconds\n    };\n\n    // Check if audio has been played before\n    const audioPlayedBefore = localStorage.getItem('audioPlayed');\n\n    // Add event listener for document click to trigger audio playback\n    const handleDocumentClick = () => {\n      if (!audioPlayedBefore) {\n        playAudio();\n      }\n    };\n    document.addEventListener('click', handleDocumentClick);\n\n    // Clean up event listener on component unmount\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n      audio.pause(); // Pause the audio if component unmounts\n    };\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        // Show the loader component while isLoading is true\n        <div className=\"loader-container\">\n          <Loader />\n        </div>\n      ) : (\n        // Show the music player app when isLoading becomes false\n        <Musicplayer />\n      )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,MAAM,MAAM,aAAa,CAAC,CAAC;AAClC,OAAOC,SAAS,MAAM,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAG,IAAIC,KAAK,CAACV,SAAS,CAAC;;IAElC;IACA,MAAMW,SAAS,GAAGA,CAAA,KAAM;MACtBF,KAAK,CAACG,IAAI,CAAC,CAAC;MACZC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;MAC3CC,UAAU,CAAC,MAAM;QACfP,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ,CAAC;;IAED;IACA,MAAMQ,iBAAiB,GAAGH,YAAY,CAACI,OAAO,CAAC,aAAa,CAAC;;IAE7D;IACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;MAChC,IAAI,CAACF,iBAAiB,EAAE;QACtBL,SAAS,CAAC,CAAC;MACb;IACF,CAAC;IACDQ,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEF,mBAAmB,CAAC;;IAEvD;IACA,OAAO,MAAM;MACXC,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAEH,mBAAmB,CAAC;MAC1DT,KAAK,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA,CAAAE,SAAA;IAAAmB,QAAA,EACGhB,SAAS;IAAA;IACR;IACAL,OAAA;MAAKsB,SAAS,EAAC,kBAAkB;MAAAD,QAAA,eAC/BrB,OAAA,CAACH,MAAM;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;IAAA;IAEN;IACA1B,OAAA,CAACJ,WAAW;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACf,gBACD,CAAC;AAEP;AAACtB,EAAA,CA9CQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}