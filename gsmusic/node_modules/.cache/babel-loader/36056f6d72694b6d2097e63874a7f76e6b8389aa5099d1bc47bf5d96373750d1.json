{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Girija Sh. Mohanta\\\\Desktop\\\\music\\\\gsmusic\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Musicplayer from './Musicplayer.js';\nimport Loader from './Loader.js'; // Import your Loader component\nimport audioClip from './loader.mp3'; // Import your audio clip\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [audioPlayed, setAudioPlayed] = useState(false); // Track if audio has been played\n\n  useEffect(() => {\n    const audio = new Audio(audioClip);\n\n    // Function to handle audio play\n    const playAudio = () => {\n      audio.play();\n      setAudioPlayed(true);\n    };\n\n    // Play audio if it hasn't been played before\n    if (!audioPlayed) {\n      playAudio();\n    } else {\n      setIsLoading(false); // If audio has been played before, stop loader\n    }\n\n    // Set timeout to stop loader after 5 seconds\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n      audio.pause(); // Pause the audio when loading is complete\n    }, 5000);\n\n    // Clean up timeout and pause audio on component unmount\n    return () => {\n      clearTimeout(timer);\n      audio.pause();\n    };\n  }, [audioPlayed]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ?\n    /*#__PURE__*/\n    // Show the loader component while isLoading is true\n    _jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Show the music player app when isLoading becomes false\n    _jsxDEV(Musicplayer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"s8bKuToByH7yDB3ri8HyoOpvRvI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Musicplayer","Loader","audioClip","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isLoading","setIsLoading","audioPlayed","setAudioPlayed","audio","Audio","playAudio","play","timer","setTimeout","pause","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Girija Sh. Mohanta/Desktop/music/gsmusic/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Musicplayer from './Musicplayer.js';\nimport Loader from './Loader.js'; // Import your Loader component\nimport audioClip from './loader.mp3'; // Import your audio clip\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [audioPlayed, setAudioPlayed] = useState(false); // Track if audio has been played\n\n  useEffect(() => {\n    const audio = new Audio(audioClip);\n\n    // Function to handle audio play\n    const playAudio = () => {\n      audio.play();\n      setAudioPlayed(true);\n    };\n\n    // Play audio if it hasn't been played before\n    if (!audioPlayed) {\n      playAudio();\n    } else {\n      setIsLoading(false); // If audio has been played before, stop loader\n    }\n\n    // Set timeout to stop loader after 5 seconds\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n      audio.pause(); // Pause the audio when loading is complete\n    }, 5000);\n\n    // Clean up timeout and pause audio on component unmount\n    return () => {\n      clearTimeout(timer);\n      audio.pause();\n    };\n  }, [audioPlayed]);\n\n  return (\n    <>\n      {isLoading ? (\n        // Show the loader component while isLoading is true\n        <Loader />\n      ) : (\n        // Show the music player app when isLoading becomes false\n        <Musicplayer />\n      )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,MAAM,MAAM,aAAa,CAAC,CAAC;AAClC,OAAOC,SAAS,MAAM,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAG,IAAIC,KAAK,CAACZ,SAAS,CAAC;;IAElC;IACA,MAAMa,SAAS,GAAGA,CAAA,KAAM;MACtBF,KAAK,CAACG,IAAI,CAAC,CAAC;MACZJ,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC;;IAED;IACA,IAAI,CAACD,WAAW,EAAE;MAChBI,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLL,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;;IAEA;IACA,MAAMO,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BR,YAAY,CAAC,KAAK,CAAC;MACnBG,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAM;MACXC,YAAY,CAACH,KAAK,CAAC;MACnBJ,KAAK,CAACM,KAAK,CAAC,CAAC;IACf,CAAC;EACH,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;EAEjB,oBACEP,OAAA,CAAAE,SAAA;IAAAe,QAAA,EACGZ,SAAS;IAAA;IACR;IACAL,OAAA,CAACH,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAAA;IAEV;IACArB,OAAA,CAACJ,WAAW;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACf,gBACD,CAAC;AAEP;AAACjB,EAAA,CA5CQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}