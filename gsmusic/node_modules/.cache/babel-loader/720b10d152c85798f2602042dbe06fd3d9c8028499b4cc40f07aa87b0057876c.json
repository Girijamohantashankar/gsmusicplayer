{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Girija Sh. Mohanta\\\\Desktop\\\\music\\\\gsmusic\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Musicplayer from './Musicplayer.js';\nimport Loader from './Loader.js'; // Import your Loader component\nimport audioClip from './loader.mp3'; // Import your audio clip\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if the audio has been played before\n    const audioPlayedBefore = localStorage.getItem('audioPlayed') === 'true';\n    if (!audioPlayedBefore) {\n      // Play the audio clip once when the component mounts\n      const audio = new Audio(audioClip);\n      audio.play().catch(error => {\n        console.error('Failed to play audio:', error);\n      });\n\n      // Set the flag in local storage to indicate that the audio has been played\n      localStorage.setItem('audioPlayed', 'true');\n\n      // Set timeout to stop loader after 5 seconds\n      const timer = setTimeout(() => {\n        setIsLoading(false);\n        audio.pause(); // Pause the audio when loading is complete\n      }, 5000);\n\n      // Clean up timeout and pause audio on component unmount\n      return () => {\n        clearTimeout(timer);\n        audio.pause();\n      };\n    } else {\n      // If the audio has been played before, stop the loader immediately\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Show the loader component until isLoading is false\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Show the music player app when isLoading becomes false\n  return /*#__PURE__*/_jsxDEV(Musicplayer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Musicplayer","Loader","audioClip","jsxDEV","_jsxDEV","App","_s","isLoading","setIsLoading","audioPlayedBefore","localStorage","getItem","audio","Audio","play","catch","error","console","setItem","timer","setTimeout","pause","clearTimeout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Girija Sh. Mohanta/Desktop/music/gsmusic/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Musicplayer from './Musicplayer.js';\nimport Loader from './Loader.js'; // Import your Loader component\nimport audioClip from './loader.mp3'; // Import your audio clip\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if the audio has been played before\n    const audioPlayedBefore = localStorage.getItem('audioPlayed') === 'true';\n\n    if (!audioPlayedBefore) {\n      // Play the audio clip once when the component mounts\n      const audio = new Audio(audioClip);\n      audio.play().catch(error => {\n        console.error('Failed to play audio:', error);\n      });\n      \n      // Set the flag in local storage to indicate that the audio has been played\n      localStorage.setItem('audioPlayed', 'true');\n\n      // Set timeout to stop loader after 5 seconds\n      const timer = setTimeout(() => {\n        setIsLoading(false);\n        audio.pause(); // Pause the audio when loading is complete\n      }, 5000);\n\n      // Clean up timeout and pause audio on component unmount\n      return () => {\n        clearTimeout(timer);\n        audio.pause();\n      };\n    } else {\n      // If the audio has been played before, stop the loader immediately\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Show the loader component until isLoading is false\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  // Show the music player app when isLoading becomes false\n  return <Musicplayer />;\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,MAAM,MAAM,aAAa,CAAC,CAAC;AAClC,OAAOC,SAAS,MAAM,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,iBAAiB,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,MAAM;IAExE,IAAI,CAACF,iBAAiB,EAAE;MACtB;MACA,MAAMG,KAAK,GAAG,IAAIC,KAAK,CAACX,SAAS,CAAC;MAClCU,KAAK,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;QAC1BC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;;MAEF;MACAN,YAAY,CAACQ,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;;MAE3C;MACA,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC7BZ,YAAY,CAAC,KAAK,CAAC;QACnBI,KAAK,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC,EAAE,IAAI,CAAC;;MAER;MACA,OAAO,MAAM;QACXC,YAAY,CAACH,KAAK,CAAC;QACnBP,KAAK,CAACS,KAAK,CAAC,CAAC;MACf,CAAC;IACH,CAAC,MAAM;MACL;MACAb,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAID,SAAS,EAAE;IACb,oBAAOH,OAAA,CAACH,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB;;EAEA;EACA,oBAAOtB,OAAA,CAACJ,WAAW;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxB;AAACpB,EAAA,CAzCQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}